input AccountFilter {
  id: IDFilterLookup
  name: StrFilterLookup
  bank: BankFilter!
  amount: DecimalFilterLookup
  type: AccountTypeFilterLookup
  currency: CurrencyTypeFilterLookup
  lastUpdate: DatetimeFilterLookup
  isActive: Boolean
  AND: AccountFilter
  OR: AccountFilter
  NOT: AccountFilter
}

input AccountInput {
  name: String!
  bank: OneToManyInput!
  type: AccountType
  currency: CurrencyType
}

type AccountNode implements Node {
  id: GlobalID!
  name: String!
  bank: BankNode!
  amount: Decimal!
  type: AccountType!
  currency: CurrencyType!
  lastUpdate: DateTime
  isActive: Boolean!
  lastTransaction: Date
  firstTransaction: Date
}

"""A connection to a list of items."""
type AccountNodeConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [AccountNodeEdge!]!

  """Total quantity of existing nodes."""
  totalCount: Int
}

"""An edge in a connection."""
type AccountNodeEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: AccountNode!
}

input AccountOrder {
  name: Ordering
  bank: BankOrder
  lastUpdate: Ordering
}

enum AccountType {
  CHECKING_ACCOUNT
  SAVINGS_ACCOUNT
  INSTALLMENT_SAVING
  TIME_DEPOSIT
  CREDIT_CARD
  STOCK
  LOAN
}

input AccountTypeFilterLookup {
  exact: AccountType
  iExact: AccountType
  contains: AccountType
  iContains: AccountType
  inList: [AccountType!]
  gt: AccountType
  gte: AccountType
  lt: AccountType
  lte: AccountType
  startsWith: AccountType
  iStartsWith: AccountType
  endsWith: AccountType
  iEndsWith: AccountType
  range: [AccountType!]
  isNull: Boolean
  regex: String
  iRegex: String
  nExact: AccountType @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIExact: AccountType @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nContains: AccountType @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIContains: AccountType @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nInList: [AccountType!] @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nGt: AccountType @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nGte: AccountType @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nLt: AccountType @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nLte: AccountType @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nStartsWith: AccountType @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIStartsWith: AccountType @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nEndsWith: AccountType @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIEndsWith: AccountType @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nRange: [AccountType!] @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIsNull: Boolean @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nRegex: String @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIRegex: String @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
}

input AmazonOrderInput {
  date: Date!
  item: String!
  isReturned: Boolean
  transaction: OneToManyInput
  returnTransaction: OneToManyInput
}

type AmazonOrderNode implements Node {
  id: GlobalID!
  date: Date!
  item: String!
  isReturned: Boolean!
  transaction: TransactionNode
  returnTransaction: TransactionNode
}

"""A connection to a list of items."""
type AmazonOrderNodeConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [AmazonOrderNodeEdge!]!

  """Total quantity of existing nodes."""
  totalCount: Int
}

"""An edge in a connection."""
type AmazonOrderNodeEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: AmazonOrderNode!
}

input AmazonOrderOrder {
  date: Ordering
}

input AmountSnapshotFilter {
  id: IDFilterLookup
  date: DateFilterLookup
  currency: CurrencyTypeFilterLookup
  AND: AmountSnapshotFilter
  OR: AmountSnapshotFilter
  NOT: AmountSnapshotFilter
}

type AmountSnapshotNode implements Node {
  id: GlobalID!
  date: Date!
  currency: CurrencyType!
  amount: Decimal!
  summary: JSON
}

"""A connection to a list of items."""
type AmountSnapshotNodeConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [AmountSnapshotNodeEdge!]!

  """Total quantity of existing nodes."""
  totalCount: Int
}

"""An edge in a connection."""
type AmountSnapshotNodeEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: AmountSnapshotNode!
}

input AmountSnapshotOrder {
  name: Ordering
  date: Ordering
}

type BankBalance {
  currency: String!
  value: Decimal!
}

input BankFilter {
  id: IDFilterLookup
  name: StrFilterLookup
  AND: BankFilter
  OR: BankFilter
  NOT: BankFilter
}

type BankNode implements Node {
  id: GlobalID!
  name: String!
  balance: [BankBalance!]!
  accountSet(
    filters: AccountFilter
    order: AccountOrder

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): AccountNodeConnection!
}

"""A connection to a list of items."""
type BankNodeConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [BankNodeEdge!]!

  """Total quantity of existing nodes."""
  totalCount: Int
}

"""An edge in a connection."""
type BankNodeEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: BankNode!
}

input BankOrder {
  name: Ordering
}

enum CurrencyType {
  KRW
  USD
}

input CurrencyTypeFilterLookup {
  exact: CurrencyType
  iExact: CurrencyType
  contains: CurrencyType
  iContains: CurrencyType
  inList: [CurrencyType!]
  gt: CurrencyType
  gte: CurrencyType
  lt: CurrencyType
  lte: CurrencyType
  startsWith: CurrencyType
  iStartsWith: CurrencyType
  endsWith: CurrencyType
  iEndsWith: CurrencyType
  range: [CurrencyType!]
  isNull: Boolean
  regex: String
  iRegex: String
  nExact: CurrencyType @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIExact: CurrencyType @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nContains: CurrencyType @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIContains: CurrencyType @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nInList: [CurrencyType!] @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nGt: CurrencyType @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nGte: CurrencyType @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nLt: CurrencyType @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nLte: CurrencyType @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nStartsWith: CurrencyType @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIStartsWith: CurrencyType @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nEndsWith: CurrencyType @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIEndsWith: CurrencyType @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nRange: [CurrencyType!] @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIsNull: Boolean @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nRegex: String @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIRegex: String @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
}

"""Date (isoformat)"""
scalar Date

input DateFilterLookup {
  exact: Date
  iExact: Date
  contains: Date
  iContains: Date
  inList: [Date!]
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  startsWith: Date
  iStartsWith: Date
  endsWith: Date
  iEndsWith: Date
  range: [Date!]
  isNull: Boolean
  regex: String
  iRegex: String
  nExact: Date @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIExact: Date @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nContains: Date @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIContains: Date @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nInList: [Date!] @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nGt: Date @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nGte: Date @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nLt: Date @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nLte: Date @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nStartsWith: Date @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIStartsWith: Date @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nEndsWith: Date @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIEndsWith: Date @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nRange: [Date!] @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIsNull: Boolean @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nRegex: String @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIRegex: String @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
}

"""Date with time (isoformat)"""
scalar DateTime

input DatetimeFilterLookup {
  exact: DateTime
  iExact: DateTime
  contains: DateTime
  iContains: DateTime
  inList: [DateTime!]
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  startsWith: DateTime
  iStartsWith: DateTime
  endsWith: DateTime
  iEndsWith: DateTime
  range: [DateTime!]
  isNull: Boolean
  regex: String
  iRegex: String
  nExact: DateTime @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIExact: DateTime @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nContains: DateTime @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIContains: DateTime @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nInList: [DateTime!] @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nGt: DateTime @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nGte: DateTime @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nLt: DateTime @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nLte: DateTime @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nStartsWith: DateTime @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIStartsWith: DateTime @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nEndsWith: DateTime @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIEndsWith: DateTime @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nRange: [DateTime!] @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIsNull: Boolean @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nRegex: String @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIRegex: String @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
}

"""Decimal (fixed-point)"""
scalar Decimal

input DecimalFilterLookup {
  exact: Decimal
  iExact: Decimal
  contains: Decimal
  iContains: Decimal
  inList: [Decimal!]
  gt: Decimal
  gte: Decimal
  lt: Decimal
  lte: Decimal
  startsWith: Decimal
  iStartsWith: Decimal
  endsWith: Decimal
  iEndsWith: Decimal
  range: [Decimal!]
  isNull: Boolean
  regex: String
  iRegex: String
  nExact: Decimal @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIExact: Decimal @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nContains: Decimal @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIContains: Decimal @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nInList: [Decimal!] @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nGt: Decimal @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nGte: Decimal @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nLt: Decimal @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nLte: Decimal @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nStartsWith: Decimal @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIStartsWith: Decimal @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nEndsWith: Decimal @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIEndsWith: Decimal @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nRange: [Decimal!] @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIsNull: Boolean @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nRegex: String @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIRegex: String @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
}

"""
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
"""
scalar GlobalID @specifiedBy(url: "https://relay.dev/graphql/objectidentification.htm")

input IDFilterLookup {
  exact: ID
  iExact: ID
  contains: ID
  iContains: ID
  inList: [ID!]
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  startsWith: ID
  iStartsWith: ID
  endsWith: ID
  iEndsWith: ID
  range: [ID!]
  isNull: Boolean
  regex: String
  iRegex: String
  nExact: ID @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIExact: ID @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nContains: ID @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIContains: ID @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nInList: [ID!] @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nGt: ID @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nGte: ID @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nLt: ID @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nLte: ID @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nStartsWith: ID @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIStartsWith: ID @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nEndsWith: ID @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIEndsWith: ID @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nRange: [ID!] @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIsNull: Boolean @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nRegex: String @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIRegex: String @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createAccount(data: AccountInput!): AccountNode!
  createTransaction(data: TransactionInput!): TransactionNode!
  createRetailer(data: RetailerInput!): RetailerNode!
  createStock(data: StockInput!): StockNode!
  createStockTransaction(data: StockTransactionInput!): StockTransactionNode!
  createAmazonOrder(data: AmazonOrderInput!): AmazonOrderNode!
}

"""An object with a Globally Unique ID"""
interface Node {
  """The Globally Unique ID of this object"""
  id: GlobalID!
}

input OneToManyInput {
  set: ID
}

enum Ordering {
  ASC
  DESC
}

"""Information to aid in pagination."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  transactionRelay(
    filters: TransactionFilter
    order: TransactionOrder

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): TransactionNodeConnection!
  retailerRelay(
    filters: RetailerFilter

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): RetailerNodeConnection!
  bankRelay(
    filters: BankFilter

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): BankNodeConnection!
  accountRelay(
    filters: AccountFilter
    order: AccountOrder

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): AccountNodeConnection!
  amountSnapshotRelay(
    filters: AmountSnapshotFilter
    order: AmountSnapshotOrder

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): AmountSnapshotNodeConnection!
  salaryRelay(
    filters: SalaryFilter
    order: SalaryOrder

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): SalaryNodeConnection!
  stockRelay(
    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): StockNodeConnection!
  amazonOrderRelay(
    order: AmazonOrderOrder

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): AmazonOrderNodeConnection!
  salaryYears: [Int!]!
  salarySummary: [SalarySummaryNode!]!
}

input RetailerFilter {
  id: IDFilterLookup
  name: StrFilterLookup
  category: TransactionCategoryFilterLookup
  AND: RetailerFilter
  OR: RetailerFilter
  NOT: RetailerFilter
}

input RetailerInput {
  name: String!
  type: RetailerType
  category: TransactionCategory
}

type RetailerNode implements Node {
  id: GlobalID!
  name: String!
  category: TransactionCategory!
}

"""A connection to a list of items."""
type RetailerNodeConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [RetailerNodeEdge!]!

  """Total quantity of existing nodes."""
  totalCount: Int
}

"""An edge in a connection."""
type RetailerNodeEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: RetailerNode!
}

enum RetailerType {
  ETC
  STORE
  PERSON
  BANK
  SERVICE
  INCOME
  RESTAURANT
}

input SalaryFilter {
  id: IDFilterLookup
  date: DateFilterLookup
  AND: SalaryFilter
  OR: SalaryFilter
  NOT: SalaryFilter
}

type SalaryNode implements Node {
  id: GlobalID!
  date: Date!
  grossPay: Decimal!
  totalAdjustment: Decimal!
  totalWithheld: Decimal!
  totalDeduction: Decimal!
  netPay: Decimal!
  payDetail: JSON!
  adjustmentDetail: JSON!
  taxDetail: JSON!
  deductionDetail: JSON!
  transaction: TransactionNode!
}

"""A connection to a list of items."""
type SalaryNodeConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [SalaryNodeEdge!]!

  """Total quantity of existing nodes."""
  totalCount: Int
}

"""An edge in a connection."""
type SalaryNodeEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: SalaryNode!
}

input SalaryOrder {
  date: Ordering
}

type SalarySummaryNode {
  year: Int!
  totalGrossPay: Decimal!
}

input StockInput {
  ticker: String
  name: String!
  currency: CurrencyType
}

type StockNode implements Node {
  id: GlobalID!
  ticker: String
  name: String!
  currency: CurrencyType!
}

"""A connection to a list of items."""
type StockNodeConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [StockNodeEdge!]!

  """Total quantity of existing nodes."""
  totalCount: Int
}

"""An edge in a connection."""
type StockNodeEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: StockNode!
}

input StockTransactionInput {
  date: Date!
  account: OneToManyInput!
  stock: OneToManyInput!
  relatedTransaction: OneToManyInput
  price: Decimal!
  amount: Decimal!
  shares: Decimal!
  note: String
}

type StockTransactionNode implements Node {
  id: GlobalID!
  account: AccountNode!
  stock: StockNode!
  relatedTransaction: TransactionNode!
  price: Decimal!
  amount: Decimal!
  shares: Decimal!
  note: String
}

input StrFilterLookup {
  exact: String
  iExact: String
  contains: String
  iContains: String
  inList: [String!]
  gt: String
  gte: String
  lt: String
  lte: String
  startsWith: String
  iStartsWith: String
  endsWith: String
  iEndsWith: String
  range: [String!]
  isNull: Boolean
  regex: String
  iRegex: String
  nExact: String @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIExact: String @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nContains: String @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIContains: String @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nInList: [String!] @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nGt: String @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nGte: String @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nLt: String @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nLte: String @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nStartsWith: String @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIStartsWith: String @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nEndsWith: String @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIEndsWith: String @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nRange: [String!] @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIsNull: Boolean @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nRegex: String @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIRegex: String @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
}

enum TransactionCategory {
  SERVICE
  DAILY_NECESSITY
  MEMBERSHIP
  GROCERY
  EAT_OUT
  CLOTHING
  PRESENT
  TRANSPORTATION
  HOUSING
  LEISURE
  MEDICAL
  PARENTING
  TRANSFER
  INTEREST
  INCOME
  STOCK
  CASH
  ETC
}

input TransactionCategoryFilterLookup {
  exact: TransactionCategory
  iExact: TransactionCategory
  contains: TransactionCategory
  iContains: TransactionCategory
  inList: [TransactionCategory!]
  gt: TransactionCategory
  gte: TransactionCategory
  lt: TransactionCategory
  lte: TransactionCategory
  startsWith: TransactionCategory
  iStartsWith: TransactionCategory
  endsWith: TransactionCategory
  iEndsWith: TransactionCategory
  range: [TransactionCategory!]
  isNull: Boolean
  regex: String
  iRegex: String
  nExact: TransactionCategory @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIExact: TransactionCategory @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nContains: TransactionCategory @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIContains: TransactionCategory @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nInList: [TransactionCategory!] @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nGt: TransactionCategory @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nGte: TransactionCategory @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nLt: TransactionCategory @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nLte: TransactionCategory @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nStartsWith: TransactionCategory @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIStartsWith: TransactionCategory @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nEndsWith: TransactionCategory @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIEndsWith: TransactionCategory @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nRange: [TransactionCategory!] @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIsNull: Boolean @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nRegex: String @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
  nIRegex: String @deprecated(reason: "The \"n\" prefix is deprecated and will be removed in the future, use `NOT` instead.\n")
}

input TransactionFilter {
  id: IDFilterLookup
  date: DateFilterLookup
  account: AccountFilter!
  AND: TransactionFilter
  OR: TransactionFilter
  NOT: TransactionFilter
}

input TransactionInput {
  amount: Decimal!
  account: OneToManyInput!
  retailer: OneToManyInput
  date: Date!
  type: TransactionCategory
  isInternal: Boolean
  note: String
}

type TransactionNode implements Node {
  id: GlobalID!
  amount: Decimal!
  account: AccountNode!
  retailer: RetailerNode
  date: Date!
  type: TransactionCategory!
  isInternal: Boolean!
  requiresDetail: Boolean!
  reviewed: Boolean!
  balance: Decimal
  note: String
  relatedTransaction: TransactionNode
  getSortingAmount: Float!
}

"""A connection to a list of items."""
type TransactionNodeConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [TransactionNodeEdge!]!

  """Total quantity of existing nodes."""
  totalCount: Int
}

"""An edge in a connection."""
type TransactionNodeEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: TransactionNode!
}

input TransactionOrder {
  id: Ordering
  date: Ordering
  account: AccountOrder
  amount: Ordering
  balance: Ordering
}
